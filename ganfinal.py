# -*- coding: utf-8 -*-
"""GANFinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VGv3mgmHgu1PFWQx2PNRSnCnLasVyNPE
"""

from __future__ import print_function, division

from keras.layers import Input, Dense, Reshape, Flatten, Dropout
from keras.layers import BatchNormalization, Activation, ZeroPadding2D
from keras.layers.advanced_activations import LeakyReLU
from keras.layers.convolutional import UpSampling2D, Conv2D
from keras.models import Sequential, Model
from keras.optimizers import Adam
from tqdm import tqdm
from PIL import Image
from PIL import ImageFilter
import pandas as pd
import cv2


import os
import matplotlib.pyplot as plt

import sys

import numpy as np

class GAN():
    def __init__(self):
        self.img_rows = 104
        self.img_cols = 104
        self.channels = 3
        self.img_shape = (self.img_rows, self.img_cols, self.channels)
        self.latent_dim = 32448

        optimizer = Adam(0.0002, 0.5)

        # Build and compile the discriminator
        self.discriminator = self.build_discriminator()
        self.discriminator.compile(loss='binary_crossentropy',
            optimizer=optimizer,
            metrics=['accuracy'])

        # Build the generator
        self.generator = self.build_generator()

        # The generator takes noise as input and generates imgs
        z = Input(shape=(self.latent_dim,))
        img = self.generator(z)

        # For the combined model we will only train the generator
        self.discriminator.trainable = False

        # The discriminator takes generated images as input and determines validity
        validity = self.discriminator(img)

        # The combined model  (stacked generator and discriminator)
        # Trains the generator to fool the discriminator
        self.combined = Model(z, validity)
        self.combined.compile(loss='binary_crossentropy', optimizer=optimizer)


    def build_generator(self):

        model = Sequential()

        model.add(Dense(256, input_dim=self.latent_dim))
        model.add(LeakyReLU(alpha=0.2))
        model.add(BatchNormalization(momentum=0.8))
        model.add(Dense(512))
        model.add(LeakyReLU(alpha=0.2))
        model.add(BatchNormalization(momentum=0.8))
        model.add(Dense(1024))
        model.add(LeakyReLU(alpha=0.2))
        model.add(BatchNormalization(momentum=0.8))
        model.add(Dense(np.prod(self.img_shape), activation='tanh'))
        model.add(Reshape(self.img_shape))

        model.summary()

        noise = Input(shape=(self.latent_dim,))
        img = model(noise)

        return Model(noise, img)

    def build_discriminator(self):

        model = Sequential()

        model.add(Flatten(input_shape=self.img_shape))
        model.add(Dense(512))
        model.add(LeakyReLU(alpha=0.2))
        model.add(Dense(256))
        model.add(LeakyReLU(alpha=0.2))
        model.add(Dense(1, activation='sigmoid'))
        model.summary()

        img = Input(shape=self.img_shape)
        validity = model(img)

        return Model(img, validity)



    def train(self, epochs, batch_size=50, sample_interval=50):

        # Load the dataset
        #X_train = get_training_data('D:/DU SPRING 2019/1.CV/GROUP PROJECT/Video_Song_Actor_01/Actor_01/new_train')

        training_data = []

        #Finds all files in datafolder
        #datafolder = 'D:/DU SPRING 2019/1.CV/GROUP PROJECT/Video_Song_Actor_01/Actor_01/1.resized'
        #datafolder = 'D:/DU SPRING 2019/1.CV/GROUP PROJECT/Video_Song_Actor_01/Actor_01/01.allnew'
        datafolder = '/content/drive/My Drive/LATEST2/croppedFaces'
        filenames = os.listdir(datafolder)
        for filename in tqdm(filenames):
            #Combines folder name and file name.
            path = os.path.join(datafolder,filename)
            #Opens an image as an Image object.
            image = Image.open(path)
            #Resizes to a desired size.
            # Smoothing the image using Gaussian Blur
            image= image.filter(ImageFilter.GaussianBlur(radius=2))
            #Creates an array of pixel values from the image.
            pixel_array = np.asarray(image)
            #pixel_array = pixel_array[:,:,1]
            #print(pixel_array.shape)

            training_data.append(pixel_array)
            
        
        #training_data is converted to a numpy array
        #print(len(training_data))
        
        X_train = np.reshape(training_data,(-1,pixel_array.shape[0],pixel_array.shape[1],pixel_array.shape[2]))
        #X_train = np.stack(training_data, axis=0)
        print(X_train.shape)


        # Rescale -1 to 1
        print("Printing max")
        print(max(np.ravel(X_train)))
        X_train = X_train / 127.5 - 1.
        #X_train = np.expand_dims(X_train, axis=3)
        print(max(np.ravel(X_train)))

        # Adversarial ground truths
        valid = np.ones((batch_size, 1))
        fake = np.zeros((batch_size, 1))
        training_points = []
        #data_folder2 = 'D:/DU SPRING 2019/1.CV/GROUP PROJECT/Video_Song_Actor_01/Actor_01/land_res'
        data_folder2 = '/content/drive/My Drive/LATEST2/croppedLand'
  
  
        #Finds all files in datafolder
        filenames = os.listdir(data_folder2)
        for filename in tqdm(filenames):
      
            #Combines folder name and file name.
            #print(filename);
            path2 = os.path.join(data_folder2,filename)
            image2 = Image.open(path2)
            pixel_array2 = np.asarray(image2)
            
            training_points.append(pixel_array2)
      
        training_ldpts = np.reshape(training_points,(-1,pixel_array2.shape[0],pixel_array2.shape[1],pixel_array2.shape[2]))
        training_ldpts = training_ldpts.reshape(444,32448)
        print("Landmarks shape")
        print(training_ldpts.shape)

        for epoch in range(epochs):

            # ---------------------
            #  Train Discriminator
            # ---------------------

            # Select a random batch of images
            idx = np.random.randint(0, X_train.shape[0], batch_size)
            imgs = X_train[idx]

            noise = np.random.normal(0, 1, (batch_size, self.latent_dim))
            ldpts = training_ldpts[idx]

            # Generate a batch of new images
            gen_imgs = self.generator.predict(ldpts)

            # Train the discriminator
            d_loss_real = self.discriminator.train_on_batch(imgs, valid)
            d_loss_fake = self.discriminator.train_on_batch(gen_imgs, fake)
            d_loss = 0.5 * np.add(d_loss_real, d_loss_fake)

            # ---------------------
            #  Train Generator
            # ---------------------

            #noise = np.random.normal(0, 1, (batch_size, self.latent_dim))

            # Train the generator (to have the discriminator label samples as valid)
            g_loss = self.combined.train_on_batch(ldpts, valid)

            # Plot the progress
            print ("%d [D loss: %f, acc.: %.2f%%] [G loss: %f]" % (epoch, d_loss[0], 100*d_loss[1], g_loss))

            # If at save interval => save generated image samples
            if epoch % sample_interval == 0:
                self.sample_images(epoch)

    def sample_images(self, epoch):
        r, c = 5, 5
        noise = np.random.normal(0, 1, (r * c, self.latent_dim))
        
        training_points = []
#        data_folder2 = 'D:/DU SPRING 2019/1.CV/GROUP PROJECT/Video_Song_Actor_01/Actor_01/land_res'
        data_folder2 = '/content/drive/My Drive/LATEST2/croppedLand'
  
  
        #Finds all files in datafolder
        filenames = os.listdir(data_folder2)
        for filename in tqdm(filenames):
      
            #Combines folder name and file name.
            #print(filename);
            path2 = os.path.join(data_folder2,filename)
            image2 = Image.open(path2)
            pixel_array2 = np.asarray(image2)
            
            training_points.append(pixel_array2)
      
        training_ldpts = np.reshape(training_points,(-1,pixel_array2.shape[0],pixel_array2.shape[1],pixel_array2.shape[2]))
        training_ldpts = training_ldpts.reshape(444,32448)
        print(training_ldpts.shape)

        
        gen_imgs = self.generator.predict(training_ldpts)

        # Rescale images 0 - 1
        gen_imgs = 0.5 * gen_imgs + 0.5

        fig, axs = plt.subplots(r, c)
        cnt = 0
        for i in range(r):
            for j in range(c):
                axs[i,j].imshow(gen_imgs[cnt, :,:,:3])
                
                axs[i,j].axis('off')
                cnt += 1
        fig.savefig("/content/drive/My Drive/LATEST2/%d.png" % epoch)
        plt.close()
    def save_model(self,filename):
        self.generator.save(filename)
      


if __name__ == '__main__':
    gan = GAN()
    gan.train(epochs=1001, batch_size=100, sample_interval=100)
    gan.save_model("/content/drive/My Drive/LATEST2/Gantrained.h5")

tensorflow --version

from keras.models import load_model
model=load_model("/content/drive/My Drive/LATEST2/Gantrained.h5") 
model.summary()

test_datagen = ImageDataGenerator(rescale=1./255)

test_generator = test_datagen.flow_from_directory(
        "/content/drive/My Drive/Latest2/inputldpts/",
        target_size=(104, 104),
        color_mode="rgb",
        shuffle = False,
        class_mode='categorical',
        batch_size=1)

filenames = test_generator.filenames
nb_samples = len(filenames)

predict = model.predict_generator(test_generator,steps = nb_samples)

from google.colab import drive
drive.mount('/content/drive/')